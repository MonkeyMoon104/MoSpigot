--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -151,8 +151,69 @@
 import org.jetbrains.annotations.Contract;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.network.protocol.game.PacketPlayOutAttachEntity;
+import net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata;
+import net.minecraft.world.level.GameRules;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.block.BlockFace;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Pose;
+import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDismountEvent;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityMountEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.entity.EntityPoseChangeEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.plugin.PluginManager;
+// CraftBukkit end
+
 public abstract class Entity implements SyncedDataHolder, INamableTileEntity, EntityAccess, ScoreHolder, DataComponentGetter {
 
+    // CraftBukkit start
+    private static final int CURRENT_LEVEL = 2;
+    static boolean isLevelAtLeast(ValueInput tag, int level) {
+        int updateLevel = tag.getIntOr("Bukkit.updateLevel", -1);
+        return updateLevel != -1 && tag.getIntOr("Bukkit.updateLevel", -1) >= level;
+    }
+
+    private CraftEntity bukkitEntity;
+
+    public CraftEntity getBukkitEntity() {
+        if (bukkitEntity == null) {
+            bukkitEntity = CraftEntity.getEntity(level.getCraftServer(), this);
+        }
+        return bukkitEntity;
+    }
+
+    // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    public int getDefaultMaxAirSupply() {
+        return TOTAL_AIR_SUPPLY;
+    }
+    // CraftBukkit end
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String TAG_ID = "id";
     public static final String TAG_UUID = "UUID";
@@ -284,6 +345,30 @@
     private final LongSet visitedBlocks;
     private final InsideBlockEffectApplier.a insideEffectCollector;
     private CustomData customData;
+    // CraftBukkit start
+    public boolean forceDrops;
+    public boolean persist = true;
+    public boolean visibleByDefault = true;
+    public boolean valid;
+    public boolean inWorld = false;
+    public boolean generation;
+    public int maxAirTicks = getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+    public boolean lastDamageCancelled; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+    public boolean persistentInvisibility = false;
+    public BlockPosition lastLavaContact;
+    // Marks an entity, that it was removed by a plugin via Entity#remove
+    // Main use case currently is for SPIGOT-7487, preventing dropping of leash when leash is removed
+    public boolean pluginRemoved = false;
+
+    public float getBukkitYaw() {
+        return this.yRot;
+    }
+
+    public boolean isChunkLoaded() {
+        return level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
+    }
+    // CraftBukkit end
 
     public Entity(EntityTypes<?> entitytypes, World world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
@@ -401,12 +486,18 @@
     }
 
     public void kill(WorldServer worldserver) {
-        this.remove(Entity.RemovalReason.KILLED);
+        this.remove(Entity.RemovalReason.KILLED, EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
         this.gameEvent(GameEvent.ENTITY_DIE);
     }
 
     public final void discard() {
-        this.remove(Entity.RemovalReason.DISCARDED);
+        // CraftBukkit start - add Bukkit remove cause
+        this.discard(null);
+    }
+
+    public final void discard(EntityRemoveEvent.Cause cause) {
+        this.remove(Entity.RemovalReason.DISCARDED, cause);
+        // CraftBukkit end
     }
 
     protected abstract void defineSynchedData(DataWatcher.a datawatcher_a);
@@ -415,6 +506,16 @@
         return this.entityData;
     }
 
+    // CraftBukkit start
+    public void refreshEntityData(EntityPlayer to) {
+        List<DataWatcher.c<?>> list = this.getEntityData().getNonDefaultValues();
+
+        if (list != null) {
+            to.connection.send(new PacketPlayOutEntityMetadata(this.getId(), list));
+        }
+    }
+    // CraftBukkit end
+
     public boolean equals(Object object) {
         return object instanceof Entity ? ((Entity) object).id == this.id : false;
     }
@@ -424,7 +525,13 @@
     }
 
     public void remove(Entity.RemovalReason entity_removalreason) {
-        this.setRemoved(entity_removalreason);
+        // CraftBukkit start - add Bukkit remove cause
+        this.setRemoved(entity_removalreason, null);
+    }
+
+    public void remove(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
+        this.setRemoved(entity_removalreason, cause);
+        // CraftBukkit end
     }
 
     public void onClientRemoval() {}
@@ -432,6 +539,12 @@
     public void onRemoval(Entity.RemovalReason entity_removalreason) {}
 
     public void setPose(EntityPose entitypose) {
+        // CraftBukkit start
+        if (entitypose == this.getPose()) {
+            return;
+        }
+        this.level.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), Pose.values()[entitypose.ordinal()]));
+        // CraftBukkit end
         this.entityData.set(Entity.DATA_POSE, entitypose);
     }
 
@@ -456,6 +569,33 @@
     }
 
     protected void setRot(float f, float f1) {
+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(f)) {
+            f = 0;
+        }
+
+        if (f == Float.POSITIVE_INFINITY || f == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayer) {
+                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+            }
+            f = 0;
+        }
+
+        // pitch was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(f1)) {
+            f1 = 0;
+        }
+
+        if (f1 == Float.POSITIVE_INFINITY || f1 == Float.NEGATIVE_INFINITY) {
+            if (this instanceof EntityPlayer) {
+                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+            }
+            f1 = 0;
+        }
+        // CraftBukkit end
+
         this.setYRot(f % 360.0F);
         this.setXRot(f1 % 360.0F);
     }
@@ -501,6 +641,15 @@
         this.baseTick();
     }
 
+    // CraftBukkit start
+    public void postTick() {
+        // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+        if (!(this instanceof EntityPlayer)) {
+            this.handlePortal();
+        }
+    }
+    // CraftBukkit end
+
     public void baseTick() {
         GameProfilerFiller gameprofilerfiller = Profiler.get();
 
@@ -514,7 +663,7 @@
             --this.boardingCooldown;
         }
 
-        this.handlePortal();
+        if (this instanceof EntityPlayer) this.handlePortal(); // CraftBukkit - // Moved up to postTick
         if (this.canSpawnSprintParticle()) {
             this.spawnSprintParticle();
         }
@@ -544,6 +693,10 @@
 
         if (this.isInLava()) {
             this.fallDistance *= 0.5D;
+            // CraftBukkit start
+        } else {
+            this.lastLavaContact = null;
+            // CraftBukkit end
         }
 
         this.checkBelowWorld();
@@ -555,7 +708,7 @@
         world = this.level();
         if (world instanceof WorldServer worldserver1) {
             if (this instanceof Leashable) {
-                Leashable.tickLeash(worldserver1, (Entity) ((Leashable) this));
+                Leashable.tickLeash(worldserver1, (Entity & Leashable) this); // CraftBukkit - decompile error
             }
         }
 
@@ -598,7 +751,22 @@
 
     public void lavaIgnite() {
         if (!this.fireImmune()) {
-            this.igniteForSeconds(15.0F);
+            // CraftBukkit start - Fallen in lava TODO: this event spams!
+            if (this instanceof EntityLiving && remainingFireTicks <= 0) {
+                // not on fire yet
+                org.bukkit.block.Block damager = (lastLavaContact == null) ? null : org.bukkit.craftbukkit.block.CraftBlock.at(level, lastLavaContact);
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+                this.level.getCraftServer().getPluginManager().callEvent(combustEvent);
+
+                if (!combustEvent.isCancelled()) {
+                    this.igniteForSeconds(combustEvent.getDuration(), false);
+                }
+            } else {
+                // This will be called every single tick the entity is in lava, so don't throw an event
+                this.igniteForSeconds(15.0F, false);
+            }
+            // CraftBukkit end
         }
     }
 
@@ -609,7 +777,7 @@
             if (world instanceof WorldServer) {
                 WorldServer worldserver = (WorldServer) world;
 
-                if (this.hurtServer(worldserver, this.damageSources().lava(), 4.0F) && this.shouldPlayLavaHurtSound() && !this.isSilent()) {
+                if (this.hurtServer(worldserver, this.damageSources().lava().directBlock(level, lastLavaContact), 4.0F) && this.shouldPlayLavaHurtSound() && !this.isSilent()) { // CraftBukkit
                     worldserver.playSound((Entity) null, this.getX(), this.getY(), this.getZ(), SoundEffects.GENERIC_BURN, this.getSoundSource(), 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
                 }
             }
@@ -622,6 +790,22 @@
     }
 
     public final void igniteForSeconds(float f) {
+        // CraftBukkit start
+        this.igniteForSeconds(f, true);
+    }
+
+    public final void igniteForSeconds(float f, boolean callEvent) {
+        if (callEvent) {
+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), f);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            f = event.getDuration();
+        }
+        // CraftBukkit end
         this.igniteForTicks(MathHelper.floor(f * 20.0F));
     }
 
@@ -646,7 +830,7 @@
     }
 
     protected void onBelowWorld() {
-        this.discard();
+        this.discard(EntityRemoveEvent.Cause.OUT_OF_WORLD); // CraftBukkit - add Bukkit remove cause
     }
 
     public boolean isFree(double d0, double d1, double d2) {
@@ -789,6 +973,28 @@
                     }
                 }
 
+                // CraftBukkit start
+                if (horizontalCollision && getBukkitEntity() instanceof Vehicle) {
+                    Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                    org.bukkit.block.Block bl = this.level.getWorld().getBlockAt(MathHelper.floor(this.getX()), MathHelper.floor(this.getY()), MathHelper.floor(this.getZ()));
+
+                    if (vec3d.x > vec3d1.x) {
+                        bl = bl.getRelative(BlockFace.EAST);
+                    } else if (vec3d.x < vec3d1.x) {
+                        bl = bl.getRelative(BlockFace.WEST);
+                    } else if (vec3d.z > vec3d1.z) {
+                        bl = bl.getRelative(BlockFace.SOUTH);
+                    } else if (vec3d.z < vec3d1.z) {
+                        bl = bl.getRelative(BlockFace.NORTH);
+                    }
+
+                    if (!bl.getType().isAir()) {
+                        VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                        level.getCraftServer().getPluginManager().callEvent(event);
+                    }
+                }
+                // CraftBukkit end
+
                 if (!this.level().isClientSide() || this.isLocalInstanceAuthoritative()) {
                     Entity.MovementEmission entity_movementemission = this.getMovementEmission();
 
@@ -1188,6 +1394,20 @@
         return SoundEffects.GENERIC_SPLASH;
     }
 
+    // CraftBukkit start - Add delegate methods
+    public SoundEffect getSwimSound0() {
+        return getSwimSound();
+    }
+
+    public SoundEffect getSwimSplashSound0() {
+        return getSwimSplashSound();
+    }
+
+    public SoundEffect getSwimHighSpeedSplashSound0() {
+        return getSwimHighSpeedSplashSound();
+    }
+    // CraftBukkit end
+
     private void checkInsideBlocks(List<Entity.c> list, InsideBlockEffectApplier.a insideblockeffectapplier_a) {
         if (this.isAffectedByBlocks()) {
             LongSet longset = this.visitedBlocks;
@@ -1699,6 +1919,7 @@
         this.yo = d1;
         this.zo = d4;
         this.setPos(d3, d1, d4);
+        if (valid) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
     }
 
     public void snapTo(Vec3D vec3d) {
@@ -1951,6 +2172,12 @@
         return false;
     }
 
+    // CraftBukkit start - collidable API
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable();
+    }
+    // CraftBukkit end
+
     public void awardKillScore(Entity entity, DamageSource damagesource) {
         if (entity instanceof EntityPlayer) {
             CriterionTriggers.ENTITY_KILLED_PLAYER.trigger((EntityPlayer) entity, this, damagesource);
@@ -1979,16 +2206,22 @@
     }
 
     public boolean saveAsPassenger(ValueOutput valueoutput) {
+        // CraftBukkit start - allow excluding certain data when saving
+        return saveAsPassenger(valueoutput, true);
+    }
+
+    public boolean saveAsPassenger(ValueOutput valueoutput, boolean includeAll) {
+        // CraftBukkit end
         if (this.removalReason != null && !this.removalReason.shouldSave()) {
             return false;
         } else {
             String s = this.getEncodeId();
 
-            if (s == null) {
+            if (!this.persist || s == null) { // CraftBukkit - persist flag
                 return false;
             } else {
                 valueoutput.putString("id", s);
-                this.saveWithoutId(valueoutput);
+                this.saveWithoutId(valueoutput, includeAll); // CraftBukkit - pass on includeAll
                 return true;
             }
         }
@@ -1999,14 +2232,34 @@
     }
 
     public void saveWithoutId(ValueOutput valueoutput) {
+        // CraftBukkit start - allow excluding certain data when saving
+        saveWithoutId(valueoutput, true);
+    }
+
+    public void saveWithoutId(ValueOutput valueoutput, boolean includeAll) {
+        // CraftBukkit end
         try {
-            if (this.vehicle != null) {
-                valueoutput.store("Pos", Vec3D.CODEC, new Vec3D(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
-            } else {
-                valueoutput.store("Pos", Vec3D.CODEC, this.position());
+            // CraftBukkit start - selectively save position
+            if (includeAll) {
+                if (this.vehicle != null) {
+                    valueoutput.store("Pos", Vec3D.CODEC, new Vec3D(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
+                } else {
+                    valueoutput.store("Pos", Vec3D.CODEC, this.position());
+                }
             }
+            // CraftBukkit end
 
             valueoutput.store("Motion", Vec3D.CODEC, this.getDeltaMovement());
+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+            // TODO: make sure this is the best way to address this.
+            if (Float.isNaN(this.yRot)) {
+                this.yRot = 0;
+            }
+
+            if (Float.isNaN(this.xRot)) {
+                this.xRot = 0;
+            }
+            // CraftBukkit end
             valueoutput.store("Rotation", Vec2F.CODEC, new Vec2F(this.getYRot(), this.getXRot()));
             valueoutput.putDouble("fall_distance", this.fallDistance);
             valueoutput.putShort("Fire", (short) this.remainingFireTicks);
@@ -2014,7 +2267,28 @@
             valueoutput.putBoolean("OnGround", this.onGround());
             valueoutput.putBoolean("Invulnerable", this.invulnerable);
             valueoutput.putInt("PortalCooldown", this.portalCooldown);
-            valueoutput.store("UUID", UUIDUtil.CODEC, this.getUUID());
+            // CraftBukkit start - selectively save uuid and world
+            if (includeAll) {
+                valueoutput.store("UUID", UUIDUtil.CODEC, this.getUUID());
+                // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+                valueoutput.putLong("WorldUUIDLeast", ((WorldServer) this.level).getWorld().getUID().getLeastSignificantBits());
+                valueoutput.putLong("WorldUUIDMost", ((WorldServer) this.level).getWorld().getUID().getMostSignificantBits());
+            }
+            valueoutput.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
+            if (!this.persist) {
+                valueoutput.putBoolean("Bukkit.persist", this.persist);
+            }
+            if (!this.visibleByDefault) {
+                valueoutput.putBoolean("Bukkit.visibleByDefault", this.visibleByDefault);
+            }
+            if (this.persistentInvisibility) {
+                valueoutput.putBoolean("Bukkit.invisible", this.persistentInvisibility);
+            }
+            // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+            if (maxAirTicks != getDefaultMaxAirSupply()) {
+                valueoutput.putInt("Bukkit.MaxAirSupply", getMaxAirSupply());
+            }
+            // CraftBukkit end
             valueoutput.storeNullable("CustomName", ComponentSerialization.CODEC, this.getCustomName());
             if (this.isCustomNameVisible()) {
                 valueoutput.putBoolean("CustomNameVisible", this.isCustomNameVisible());
@@ -2050,14 +2324,14 @@
                 valueoutput.store("data", CustomData.CODEC, this.customData);
             }
 
-            this.addAdditionalSaveData(valueoutput);
+            this.addAdditionalSaveData(valueoutput, includeAll); // CraftBukkit - pass on includeAll
             if (this.isVehicle()) {
                 ValueOutput.b valueoutput_b = valueoutput.childrenList("Passengers");
 
                 for (Entity entity : this.getPassengers()) {
                     ValueOutput valueoutput1 = valueoutput_b.addChild();
 
-                    if (!entity.saveAsPassenger(valueoutput1)) {
+                    if (!entity.saveAsPassenger(valueoutput1, includeAll)) { // CraftBukkit - pass on includeAll
                         valueoutput_b.discardLast();
                     }
                 }
@@ -2067,6 +2341,11 @@
                 }
             }
 
+            // CraftBukkit start - stores eventually existing bukkit values
+            if (this.bukkitEntity != null) {
+                this.bukkitEntity.storeBukkitValues(valueoutput);
+            }
+            // CraftBukkit end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.addCategory("Entity being saved");
@@ -2106,7 +2385,7 @@
                 if (Double.isFinite((double) this.getYRot()) && Double.isFinite((double) this.getXRot())) {
                     this.reapplyPosition();
                     this.setRot(this.getYRot(), this.getXRot());
-                    this.setCustomName((IChatBaseComponent) valueinput.read("CustomName", ComponentSerialization.CODEC).orElse((Object) null));
+                    this.setCustomName((IChatBaseComponent) valueinput.read("CustomName", ComponentSerialization.CODEC).orElse(null)); // CraftBukkit - decompile error
                     this.setCustomNameVisible(valueinput.getBooleanOr("CustomNameVisible", false));
                     this.setSilent(valueinput.getBooleanOr("Silent", false));
                     this.setNoGravity(valueinput.getBooleanOr("NoGravity", false));
@@ -2115,7 +2394,7 @@
                     this.hasVisualFire = valueinput.getBooleanOr("HasVisualFire", false);
                     this.customData = (CustomData) valueinput.read("data", CustomData.CODEC).orElse(CustomData.EMPTY);
                     this.tags.clear();
-                    Optional optional = valueinput.read("Tags", Entity.TAG_LIST_CODEC);
+                    Optional<List<String>> optional = valueinput.read("Tags", Entity.TAG_LIST_CODEC); // CraftBukkit - deocmpile error
                     Set set = this.tags;
 
                     Objects.requireNonNull(this.tags);
@@ -2131,6 +2410,45 @@
             } else {
                 throw new IllegalStateException("Entity has invalid position");
             }
+
+            // CraftBukkit start
+            this.persist = valueinput.getBooleanOr("Bukkit.persist", this.persist);
+            this.visibleByDefault = valueinput.getBooleanOr("Bukkit.visibleByDefault", this.visibleByDefault);
+            // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+            this.maxAirTicks = valueinput.getIntOr("Bukkit.MaxAirSupply", this.maxAirTicks);
+            // CraftBukkit end
+
+            // CraftBukkit start - Reset world
+            if (this instanceof EntityPlayer) {
+                Server server = Bukkit.getServer();
+                org.bukkit.World bworld = null;
+
+                // TODO: Remove World related checks, replaced with WorldUID
+                String worldName = valueinput.getStringOr("world", "");
+
+                Optional<Long> most = valueinput.getLong("WorldUUIDMost");
+                Optional<Long> least = valueinput.getLong("WorldUUIDLeast");
+                if (most.isPresent() && least.isPresent()) {
+                    UUID uid = new UUID(most.get(), least.get());
+                    bworld = server.getWorld(uid);
+                } else {
+                    bworld = server.getWorld(worldName);
+                }
+
+                if (bworld == null) {
+                    bworld = ((org.bukkit.craftbukkit.CraftServer) server).getServer().getLevel(World.OVERWORLD).getWorld();
+                }
+
+                ((EntityPlayer) this).setLevel(bworld == null ? null : ((CraftWorld) bworld).getHandle());
+            }
+            this.getBukkitEntity().readBukkitValues(valueinput);
+            boolean bukkitInvisible = valueinput.getBooleanOr("Bukkit.invisible", false);
+            if (bukkitInvisible) {
+                this.setInvisible(bukkitInvisible);
+                this.persistentInvisibility = bukkitInvisible;
+            }
+            // CraftBukkit end
+
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.addCategory("Entity being loaded");
@@ -2152,6 +2470,12 @@
         return entitytypes.canSerialize() && minecraftkey != null ? minecraftkey.toString() : null;
     }
 
+    // CraftBukkit start - allow excluding certain data when saving
+    protected void addAdditionalSaveData(ValueOutput valueoutput, boolean includeAll) {
+        addAdditionalSaveData(valueoutput);
+    }
+    // CraftBukkit end
+
     protected abstract void readAdditionalSaveData(ValueInput valueinput);
 
     protected abstract void addAdditionalSaveData(ValueOutput valueoutput);
@@ -2176,9 +2500,22 @@
         if (itemstack.isEmpty()) {
             return null;
         } else {
+            // CraftBukkit start - Capture drops for death event
+            if (this instanceof EntityLiving && !((EntityLiving) this).forceDrops) {
+                ((EntityLiving) this).drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(itemstack));
+                return null;
+            }
+            // CraftBukkit end
             EntityItem entityitem = new EntityItem(worldserver, this.getX() + vec3d.x, this.getY() + vec3d.y, this.getZ() + vec3d.z, itemstack);
 
             entityitem.setDefaultPickUpDelay();
+            // CraftBukkit start
+            EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+            Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return null;
+            }
+            // CraftBukkit end
             worldserver.addFreshEntity(entityitem);
             return entityitem;
         }
@@ -2264,6 +2601,12 @@
 
                 if (leashable2.getLeashHolder() == entityhuman) {
                     if (!this.level().isClientSide()) {
+                        // CraftBukkit start - fire PlayerUnleashEntityEvent
+                        if (CraftEventFactory.callPlayerUnleashEntityEvent(this, entityhuman, enumhand).isCancelled()) {
+                            ((EntityPlayer) entityhuman).connection.send(new PacketPlayOutAttachEntity(this, leashable2.getLeashHolder()));
+                            return EnumInteractionResult.PASS;
+                        }
+                        // CraftBukkit end
                         if (entityhuman.hasInfiniteMaterials()) {
                             leashable2.removeLeash();
                         } else {
@@ -2281,6 +2624,13 @@
 
                 if (itemstack1.is(Items.LEAD) && !(leashable2.getLeashHolder() instanceof EntityHuman)) {
                     if (!this.level().isClientSide() && leashable2.canHaveALeashAttachedTo(entityhuman)) {
+                        // CraftBukkit start - fire PlayerLeashEntityEvent
+                        if (CraftEventFactory.callPlayerLeashEntityEvent(this, entityhuman, entityhuman, enumhand).isCancelled()) {
+                            ((EntityPlayer) entityhuman).resendItemInHands(); // SPIGOT-7615: Resend to fix client desync with used item
+                            ((EntityPlayer) entityhuman).connection.send(new PacketPlayOutAttachEntity(this, leashable2.getLeashHolder()));
+                            return EnumInteractionResult.PASS;
+                        }
+                        // CraftBukkit end
                         if (leashable2.isLeashed()) {
                             leashable2.dropLeash();
                         }
@@ -2299,7 +2649,7 @@
     }
 
     public boolean shearOffAllLeashConnections(@Nullable EntityHuman entityhuman) {
-        boolean flag = this.dropAllLeashConnections(entityhuman);
+        boolean flag = this.dropAllLeashConnections(entityhuman, UnleashReason.SHEAR); // CraftBukkit
 
         if (flag) {
             World world = this.level();
@@ -2315,17 +2665,29 @@
     }
 
     public boolean dropAllLeashConnections(@Nullable EntityHuman entityhuman) {
+        // CraftBukkit start
+        return dropAllLeashConnections(entityhuman, UnleashReason.UNKNOWN);
+    }
+
+    public boolean dropAllLeashConnections(@Nullable EntityHuman entityhuman, EntityUnleashEvent.UnleashReason reason) {
+        // CraftBukkit end
         List<Leashable> list = Leashable.leashableLeashedTo(this);
         boolean flag = !list.isEmpty();
 
         if (this instanceof Leashable leashable) {
             if (leashable.isLeashed()) {
+                this.level().getCraftServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), reason)); // CraftBukkit
                 leashable.dropLeash();
                 flag = true;
             }
         }
 
         for (Leashable leashable1 : list) {
+            // CraftBukkit start
+            if (leashable1 instanceof Entity entity) {
+                this.level().getCraftServer().getPluginManager().callEvent(new EntityUnleashEvent(entity.getBukkitEntity(), reason));
+            }
+            // CraftBukkit end
             leashable1.dropLeash();
         }
 
@@ -2354,7 +2716,9 @@
                 if (world instanceof WorldServer) {
                     WorldServer worldserver = (WorldServer) world;
 
+                    this.forceDrops = true; // CraftBukkit
                     this.spawnAtLocation(worldserver, itemstack1, vec3d);
+                    this.forceDrops = false; // CraftBukkit
                     CriterionTriggers.PLAYER_SHEARED_EQUIPMENT.trigger((EntityPlayer) entityhuman, itemstack1, entityinsentient);
                 }
 
@@ -2427,7 +2791,7 @@
             return false;
         } else if (!entity.couldAcceptPassenger()) {
             return false;
-        } else if (!this.level().isClientSide() && !entity.type.canSerialize()) {
+        } else if (!flag && !this.level().isClientSide() && !entity.type.canSerialize()) { // SPIGOT-7947: Allow force riding all entities
             return false;
         } else {
             for (Entity entity1 = entity; entity1.vehicle != null; entity1 = entity1.vehicle) {
@@ -2437,6 +2801,27 @@
             }
 
             if (flag || this.canRide(entity) && entity.canAddPassenger(this)) {
+                // CraftBukkit start
+                if (entity.getBukkitEntity() instanceof Vehicle && this.getBukkitEntity() instanceof LivingEntity) {
+                    VehicleEnterEvent event = new VehicleEnterEvent((Vehicle) entity.getBukkitEntity(), this.getBukkitEntity());
+                    // Suppress during worldgen
+                    if (this.valid) {
+                        Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event.isCancelled()) {
+                        return false;
+                    }
+                }
+
+                EntityMountEvent event = new EntityMountEvent(this.getBukkitEntity(), entity.getBukkitEntity());
+                // Suppress during worldgen
+                if (this.valid) {
+                    Bukkit.getPluginManager().callEvent(event);
+                }
+                if (event.isCancelled()) {
+                    return false;
+                }
+                // CraftBukkit end
                 if (this.isPassenger()) {
                     this.stopRiding();
                 }
@@ -2472,7 +2857,7 @@
             Entity entity = this.vehicle;
 
             this.vehicle = null;
-            entity.removePassenger(this);
+            if (!entity.removePassenger(this)) this.vehicle = entity; // CraftBukkit
         }
 
     }
@@ -2503,10 +2888,38 @@
         }
     }
 
-    protected void removePassenger(Entity entity) {
+    protected boolean removePassenger(Entity entity) { // CraftBukkit
         if (entity.getVehicle() == this) {
             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
         } else {
+            // CraftBukkit start
+            CraftEntity craft = (CraftEntity) entity.getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (getBukkitEntity() instanceof Vehicle && entity.getBukkitEntity() instanceof LivingEntity) {
+                VehicleExitEvent event = new VehicleExitEvent(
+                        (Vehicle) getBukkitEntity(),
+                        (LivingEntity) entity.getBukkitEntity()
+                );
+                // Suppress during worldgen
+                if (this.valid) {
+                    Bukkit.getPluginManager().callEvent(event);
+                }
+                CraftEntity craftn = (CraftEntity) entity.getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return false;
+                }
+            }
+
+            EntityDismountEvent event = new EntityDismountEvent(entity.getBukkitEntity(), this.getBukkitEntity());
+            // Suppress during worldgen
+            if (this.valid) {
+                Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
             if (this.passengers.size() == 1 && this.passengers.get(0) == entity) {
                 this.passengers = ImmutableList.of();
             } else {
@@ -2518,6 +2931,7 @@
             entity.boardingCooldown = 60;
             this.gameEvent(GameEvent.ENTITY_DISMOUNT, entity);
         }
+        return true; // CraftBukkit
     }
 
     protected boolean canAddPassenger(Entity entity) {
@@ -2612,7 +3026,7 @@
                     if (teleporttransition != null) {
                         WorldServer worldserver1 = teleporttransition.newLevel();
 
-                        if (worldserver.getServer().isLevelEnabled(worldserver1) && (worldserver1.dimension() == worldserver.dimension() || this.canTeleport(worldserver, worldserver1))) {
+                        if (this instanceof EntityPlayer || (worldserver1 != null && (worldserver1.dimension() == worldserver.dimension() || this.canTeleport(worldserver, worldserver1)))) { // CraftBukkit - always call event for players
                             this.teleport(teleporttransition);
                         }
                     }
@@ -2719,6 +3133,13 @@
     }
 
     public void setSwimming(boolean flag) {
+        // CraftBukkit start
+        if (valid && this.isSwimming() != flag && this instanceof EntityLiving) {
+            if (CraftEventFactory.callToggleSwimEvent((EntityLiving) this, flag).isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.setSharedFlag(4, flag);
     }
 
@@ -2772,8 +3193,12 @@
         return this.getTeam() != null ? this.getTeam().isAlliedTo(scoreboardteambase) : false;
     }
 
+    // CraftBukkit - start
     public void setInvisible(boolean flag) {
-        this.setSharedFlag(5, flag);
+        if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+            this.setSharedFlag(5, flag);
+        }
+        // CraftBukkit - end
     }
 
     public boolean getSharedFlag(int i) {
@@ -2792,7 +3217,7 @@
     }
 
     public int getMaxAirSupply() {
-        return 300;
+        return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
     }
 
     public int getAirSupply() {
@@ -2800,7 +3225,18 @@
     }
 
     public void setAirSupply(int i) {
-        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, i);
+        // CraftBukkit start
+        EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), i);
+        // Suppress during worldgen
+        if (this.valid) {
+            event.getEntity().getServer().getPluginManager().callEvent(event);
+        }
+        if (event.isCancelled() && this.getAirSupply() != i) {
+            this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
+            return;
+        }
+        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+        // CraftBukkit end
     }
 
     public void clearFreeze() {
@@ -2831,11 +3267,40 @@
 
     public void thunderHit(WorldServer worldserver, EntityLightning entitylightning) {
         this.setRemainingFireTicks(this.remainingFireTicks + 1);
+        // CraftBukkit start
+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+        final org.bukkit.entity.Entity stormBukkitEntity = entitylightning.getBukkitEntity();
+        final PluginManager pluginManager = Bukkit.getPluginManager();
+        // CraftBukkit end
+
         if (this.remainingFireTicks == 0) {
-            this.igniteForSeconds(8.0F);
+            // CraftBukkit start - Call a combust event when lightning strikes
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8.0F);
+            pluginManager.callEvent(entityCombustEvent);
+            if (!entityCombustEvent.isCancelled()) {
+                this.igniteForSeconds(entityCombustEvent.getDuration(), false);
+            }
+            // CraftBukkit end
         }
 
-        this.hurtServer(worldserver, this.damageSources().lightningBolt(), 5.0F);
+        // CraftBukkit start
+        if (thisBukkitEntity instanceof Hanging) {
+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+            pluginManager.callEvent(hangingEvent);
+
+            if (hangingEvent.isCancelled()) {
+                return;
+            }
+        }
+
+        if (this.fireImmune()) {
+            return;
+        }
+
+        if (!this.hurtServer(worldserver, this.damageSources().lightningBolt().customEntityDamager(entitylightning), 5.0F)) {
+            return;
+        }
+        // CraftBukkit end
     }
 
     public void onAboveBubbleColumn(boolean flag, BlockPosition blockposition) {
@@ -3015,10 +3480,22 @@
 
     @Nullable
     public Entity teleport(TeleportTransition teleporttransition) {
-        WorldServer worldserver = this.level();
+        WorldServer worldserver = (WorldServer) this.level(); // CraftBukkit - decompile error
 
         if (worldserver instanceof WorldServer worldserver1) {
             if (!this.isRemoved()) {
+                // CraftBukkit start
+                PositionMoveRotation absolutePosition = PositionMoveRotation.calculateAbsolute(PositionMoveRotation.of(this), PositionMoveRotation.of(teleporttransition), teleporttransition.relatives());
+                Location to = CraftLocation.toBukkit(absolutePosition.position(), teleporttransition.newLevel().getWorld(), absolutePosition.yRot(), absolutePosition.xRot());
+                EntityTeleportEvent teleEvent = CraftEventFactory.callEntityTeleportEvent(this, to);
+                if (teleEvent.isCancelled()) {
+                    return null;
+                }
+                if (!to.equals(teleEvent.getTo())) {
+                    to = teleEvent.getTo();
+                    teleporttransition = new TeleportTransition(((CraftWorld) to.getWorld()).getHandle(), CraftLocation.toVec3D(to), Vec3D.ZERO, to.getYaw(), to.getPitch(), teleporttransition.missingRespawnBlock(), teleporttransition.asPassenger(), Set.of(), teleporttransition.postTeleportTransition(), teleporttransition.cause());
+                }
+                // CraftBukkit end
                 worldserver = teleporttransition.newLevel();
                 boolean flag = worldserver.dimension() != worldserver1.dimension();
 
@@ -3080,8 +3557,12 @@
         } else {
             entity2.restoreFrom(this);
             this.removeAfterChangingDimensions();
+            // CraftBukkit start - Forward the CraftEntity to the new entity
+            this.getBukkitEntity().setHandle(entity2);
+            entity2.bukkitEntity = this.getBukkitEntity();
+            // CraftBukkit end
             entity2.teleportSetPosition(PositionMoveRotation.of(teleporttransition), teleporttransition.relatives());
-            worldserver1.addDuringTeleport(entity2);
+            if (this.inWorld) worldserver1.addDuringTeleport(entity2); // CraftBukkit - Don't spawn the new entity if the current entity isn't spawned
 
             for (Entity entity3 : list1) {
                 entity3.startRiding(entity2, true);
@@ -3160,8 +3641,9 @@
     }
 
     protected void removeAfterChangingDimensions() {
-        this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
+        this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION, null); // CraftBukkit - add Bukkit remove cause
         if (this instanceof Leashable leashable) {
+            this.level().getCraftServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
             leashable.removeLeash();
         }
 
@@ -3179,6 +3661,20 @@
         return BlockPortalShape.getRelativePosition(blockutil_rectangle, enumdirection_enumaxis, this.position(), this.getDimensions(this.getPose()));
     }
 
+    // CraftBukkit start
+    public CraftPortalEvent callPortalEvent(Entity entity, Location exit, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+        Location enter = bukkitEntity.getLocation();
+
+        EntityPortalEvent event = new EntityPortalEvent(bukkitEntity, enter, exit, searchRadius, true, creationRadius);
+        event.getEntity().getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
+            return null;
+        }
+        return new CraftPortalEvent(event);
+    }
+    // CraftBukkit end
+
     public boolean canUsePortal(boolean flag) {
         return (flag || !this.isPassenger()) && this.isAlive();
     }
@@ -3303,8 +3799,14 @@
         return (Boolean) this.entityData.get(Entity.DATA_CUSTOM_NAME_VISIBLE);
     }
 
-    public boolean teleportTo(WorldServer worldserver, double d0, double d1, double d2, Set<Relative> set, float f, float f1, boolean flag) {
-        Entity entity = this.teleport(new TeleportTransition(worldserver, new Vec3D(d0, d1, d2), Vec3D.ZERO, f, f1, set, TeleportTransition.DO_NOTHING));
+    // CraftBukkit start
+    public final boolean teleportTo(WorldServer worldserver, double d0, double d1, double d2, Set<Relative> set, float f, float f1, boolean flag) {
+        return teleportTo(worldserver, d0, d1, d2, set, f, f1, flag, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public boolean teleportTo(WorldServer worldserver, double d0, double d1, double d2, Set<Relative> set, float f, float f1, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        Entity entity = this.teleport(new TeleportTransition(worldserver, new Vec3D(d0, d1, d2), Vec3D.ZERO, f, f1, set, TeleportTransition.DO_NOTHING, cause));
+        // CraftBukkit end
 
         return entity != null;
     }
@@ -3426,7 +3928,26 @@
     }
 
     public final void setBoundingBox(AxisAlignedBB axisalignedbb) {
-        this.bb = axisalignedbb;
+        // CraftBukkit start - block invalid bounding boxes
+        double minX = axisalignedbb.minX,
+                minY = axisalignedbb.minY,
+                minZ = axisalignedbb.minZ,
+                maxX = axisalignedbb.maxX,
+                maxY = axisalignedbb.maxY,
+                maxZ = axisalignedbb.maxZ;
+        double len = axisalignedbb.maxX - axisalignedbb.minX;
+        if (len < 0) maxX = minX;
+        if (len > 64) maxX = minX + 64.0;
+
+        len = axisalignedbb.maxY - axisalignedbb.minY;
+        if (len < 0) maxY = minY;
+        if (len > 64) maxY = minY + 64.0;
+
+        len = axisalignedbb.maxZ - axisalignedbb.minZ;
+        if (len < 0) maxZ = minZ;
+        if (len > 64) maxZ = minZ + 64.0;
+        this.bb = new AxisAlignedBB(minX, minY, minZ, maxX, maxY, maxZ);
+        // CraftBukkit end
     }
 
     public final float getEyeHeight(EntityPose entitypose) {
@@ -3639,8 +4160,37 @@
         return 0;
     }
 
+    // CraftBukkit start
+    private final ICommandListener commandSource = new ICommandListener() {
+
+        @Override
+        public void sendSystemMessage(IChatBaseComponent ichatbasecomponent) {
+        }
+
+        @Override
+        public CommandSender getBukkitSender(CommandListenerWrapper wrapper) {
+            return Entity.this.getBukkitEntity();
+        }
+
+        @Override
+        public boolean acceptsSuccess() {
+            return ((WorldServer) Entity.this.level()).getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK);
+        }
+
+        @Override
+        public boolean acceptsFailure() {
+            return true;
+        }
+
+        @Override
+        public boolean shouldInformAdmins() {
+            return true;
+        }
+    };
+    // CraftBukkit end
+
     public CommandListenerWrapper createCommandSourceStackForNameResolution(WorldServer worldserver) {
-        return new CommandListenerWrapper(ICommandListener.NULL, this.position(), this.getRotationVector(), worldserver, 0, this.getName().getString(), this.getDisplayName(), worldserver.getServer(), this);
+        return new CommandListenerWrapper(commandSource, this.position(), this.getRotationVector(), worldserver, 0, this.getName().getString(), this.getDisplayName(), worldserver.getServer(), this); // CraftBukkit
     }
 
     public void lookAt(ArgumentAnchor.Anchor argumentanchor_anchor, Vec3D vec3d) {
@@ -3701,6 +4251,11 @@
                                     vec3d = vec3d.add(vec3d1);
                                     ++k1;
                                 }
+                                // CraftBukkit start - store last lava contact location
+                                if (tagkey == TagsFluid.LAVA) {
+                                    this.lastLavaContact = blockposition_mutableblockposition.immutable();
+                                }
+                                // CraftBukkit end
                             }
                         }
                     }
@@ -4009,6 +4564,14 @@
 
     @Override
     public final void setRemoved(Entity.RemovalReason entity_removalreason) {
+        // CraftBukkit start - add Bukkit remove cause
+        setRemoved(entity_removalreason, null);
+    }
+
+    @Override
+    public final void setRemoved(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
+        CraftEventFactory.callEntityRemoveEvent(this, cause);
+        // CraftBukkit end
         if (this.removalReason == null) {
             this.removalReason = entity_removalreason;
         }
