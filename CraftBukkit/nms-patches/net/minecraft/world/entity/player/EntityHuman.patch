--- a/net/minecraft/world/entity/player/EntityHuman.java
+++ b/net/minecraft/world/entity/player/EntityHuman.java
@@ -126,6 +126,19 @@
 import net.minecraft.world.scores.ScoreboardTeamBase;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.nbt.NBTBase;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftVector;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
+// CraftBukkit end
+
 public abstract class EntityHuman extends EntityLiving {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -146,7 +159,8 @@
     private static final int CURRENT_IMPULSE_CONTEXT_RESET_GRACE_TIME_TICKS = 40;
     public static final Vec3D DEFAULT_VEHICLE_ATTACHMENT = new Vec3D(0.0D, 0.6D, 0.0D);
     public static final EntitySize STANDING_DIMENSIONS = EntitySize.scalable(0.6F, 1.8F).withEyeHeight(1.62F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT));
-    private static final Map<EntityPose, EntitySize> POSES = ImmutableMap.builder().put(EntityPose.STANDING, EntityHuman.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, EntityHuman.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SWIMMING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SPIN_ATTACK, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.CROUCHING, EntitySize.scalable(0.6F, 1.5F).withEyeHeight(1.27F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT))).put(EntityPose.DYING, EntitySize.fixed(0.2F, 0.2F).withEyeHeight(1.62F)).build();
+    // CraftBukkit - decompile error
+    private static final Map<EntityPose, EntitySize> POSES = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.STANDING_DIMENSIONS).put(EntityPose.SLEEPING, EntityHuman.SLEEPING_DIMENSIONS).put(EntityPose.FALL_FLYING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SWIMMING, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.SPIN_ATTACK, EntitySize.scalable(0.6F, 0.6F).withEyeHeight(0.4F)).put(EntityPose.CROUCHING, EntitySize.scalable(0.6F, 1.5F).withEyeHeight(1.27F).withAttachments(EntityAttachments.builder().attach(EntityAttachment.VEHICLE, EntityHuman.DEFAULT_VEHICLE_ATTACHMENT))).put(EntityPose.DYING, EntitySize.fixed(0.2F, 0.2F).withEyeHeight(1.62F)).build();
     private static final DataWatcherObject<Float> DATA_PLAYER_ABSORPTION_ID = DataWatcher.<Float>defineId(EntityHuman.class, DataWatcherRegistry.FLOAT);
     private static final DataWatcherObject<Integer> DATA_SCORE_ID = DataWatcher.<Integer>defineId(EntityHuman.class, DataWatcherRegistry.INT);
     protected static final DataWatcherObject<Byte> DATA_PLAYER_MODE_CUSTOMISATION = DataWatcher.<Byte>defineId(EntityHuman.class, DataWatcherRegistry.BYTE);
@@ -165,7 +179,7 @@
     private static final int DEFAULT_CURRENT_IMPULSE_CONTEXT_RESET_GRACE_TIME = 0;
     private long timeEntitySatOnShoulder;
     final PlayerInventory inventory;
-    protected InventoryEnderChest enderChestInventory = new InventoryEnderChest();
+    protected InventoryEnderChest enderChestInventory = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
     public final ContainerPlayer inventoryMenu;
     public Container containerMenu;
     protected FoodMetaData foodData = new FoodMetaData();
@@ -205,6 +219,16 @@
     private boolean ignoreFallDamageFromCurrentImpulse;
     private int currentImpulseContextResetGraceTime;
 
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public int oldLevel = -1;
+
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     public EntityHuman(World world, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
         this.lastItemInMainHand = ItemStack.EMPTY;
@@ -375,7 +399,7 @@
     }
 
     private void turtleHelmetTick() {
-        this.addEffect(new MobEffect(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
+        this.addEffect(new MobEffect(MobEffects.WATER_BREATHING, 200, 0, false, false, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TURTLE_HELMET); // CraftBukkit
     }
 
     private boolean isEquipped(Item item) {
@@ -527,8 +551,14 @@
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
             this.stopRiding();
-            this.setShiftKeyDown(false);
-        } else {
+            // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
+            if (!this.isPassenger()) {
+                this.setShiftKeyDown(false);
+                return;
+            }
+        }
+        {
+            // CraftBukkit end
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
@@ -599,7 +629,7 @@
     private void playShoulderEntityAmbientSound(NBTTagCompound nbttagcompound) {
         if (!nbttagcompound.isEmpty() && !nbttagcompound.getBooleanOr("Silent", false)) {
             if (this.level().random.nextInt(200) == 0) {
-                EntityTypes<?> entitytypes = (EntityTypes) nbttagcompound.read("id", EntityTypes.CODEC).orElse((Object) null);
+                EntityTypes<?> entitytypes = (EntityTypes) nbttagcompound.read("id", EntityTypes.CODEC).orElse(null); // CraftBukkit - decompile error
 
                 if (entitytypes == EntityTypes.PARROT && !EntityParrot.imitateNearbyMobs(this.level(), this)) {
                     this.level().playSound((Entity) null, this.getX(), this.getY(), this.getZ(), EntityParrot.getAmbient(this.level(), this.level().random), this.getSoundSource(), 1.0F, EntityParrot.getPitch(this.level().random));
@@ -776,7 +806,7 @@
 
         this.setScore(valueinput.getIntOr("Score", 0));
         this.foodData.readAdditionalSaveData(valueinput);
-        Optional optional = valueinput.read("abilities", PlayerAbilities.a.CODEC);
+        Optional<PlayerAbilities.a> optional = valueinput.read("abilities", PlayerAbilities.a.CODEC); // CraftBukkit - decompile error
         PlayerAbilities playerabilities = this.abilities;
 
         Objects.requireNonNull(this.abilities);
@@ -786,7 +816,7 @@
         this.setShoulderEntityLeft((NBTTagCompound) valueinput.read("ShoulderEntityLeft", NBTTagCompound.CODEC).orElseGet(NBTTagCompound::new));
         this.setShoulderEntityRight((NBTTagCompound) valueinput.read("ShoulderEntityRight", NBTTagCompound.CODEC).orElseGet(NBTTagCompound::new));
         this.setLastDeathLocation(valueinput.read("LastDeathLocation", GlobalPos.CODEC));
-        this.currentImpulseImpactPos = (Vec3D) valueinput.read("current_explosion_impact_pos", Vec3D.CODEC).orElse((Object) null);
+        this.currentImpulseImpactPos = (Vec3D) valueinput.read("current_explosion_impact_pos", Vec3D.CODEC).orElse(null); // CraftBukkit - decompile error
         this.ignoreFallDamageFromCurrentImpulse = valueinput.getBooleanOr("ignore_fall_damage_from_current_explosion", false);
         this.currentImpulseContextResetGraceTime = valueinput.getIntOr("current_impulse_context_reset_grace_time", 0);
     }
@@ -838,10 +868,10 @@
             if (this.isDeadOrDying()) {
                 return false;
             } else {
-                this.removeEntitiesOnShoulder();
+                // this.removeEntitiesOnShoulder(); // CraftBukkit - moved down
                 if (damagesource.scalesWithDifficulty()) {
                     if (worldserver.getDifficulty() == EnumDifficulty.PEACEFUL) {
-                        f = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (worldserver.getDifficulty() == EnumDifficulty.EASY) {
@@ -853,7 +883,13 @@
                     }
                 }
 
-                return f == 0.0F ? false : super.hurtServer(worldserver, damagesource, f);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.hurtServer(worldserver, damagesource, f);
+                if (damaged) {
+                    this.removeEntitiesOnShoulder();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -877,10 +913,29 @@
     }
 
     public boolean canHarmPlayer(EntityHuman entityhuman) {
-        ScoreboardTeamBase scoreboardteambase = this.getTeam();
-        ScoreboardTeamBase scoreboardteambase1 = entityhuman.getTeam();
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (entityhuman instanceof EntityPlayer) {
+            EntityPlayer thatPlayer = (EntityPlayer) entityhuman;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        } else {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = entityhuman.level().getCraftServer().getOfflinePlayer(entityhuman.getScoreboardName());
+            team = entityhuman.level().getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
 
-        return scoreboardteambase == null ? true : (!scoreboardteambase.isAlliedTo(scoreboardteambase1) ? true : scoreboardteambase.isAllowFriendlyFire());
+        if (this instanceof EntityPlayer) {
+            return !team.hasPlayer(((EntityPlayer) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.level().getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        // CraftBukkit end
     }
 
     @Override
@@ -894,7 +949,12 @@
     }
 
     @Override
-    protected void actuallyHurt(WorldServer worldserver, DamageSource damagesource, float f) {
+    // CraftBukkit start
+    protected boolean actuallyHurt(WorldServer worldserver, DamageSource damagesource, float f, EntityDamageEvent event) { // void -> boolean
+        if (true) {
+            return super.actuallyHurt(worldserver, damagesource, f, event);
+        }
+        // CraftBukkit end
         if (!this.isInvulnerableTo(worldserver, damagesource)) {
             f = this.getDamageAfterArmorAbsorb(damagesource, f);
             f = this.getDamageAfterMagicAbsorb(damagesource, f);
@@ -909,7 +969,7 @@
             }
 
             if (f != 0.0F) {
-                this.causeFoodExhaustion(damagesource.getFoodExhaustion());
+                this.causeFoodExhaustion(damagesource.getFoodExhaustion(), EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                 this.getCombatTracker().recordDamage(damagesource, f);
                 this.setHealth(this.getHealth() - f);
                 if (f < 3.4028235E37F) {
@@ -919,6 +979,7 @@
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
             }
         }
+        return false; // CraftBukkit
     }
 
     public boolean isTextFilteringEnabled() {
@@ -1077,10 +1138,15 @@
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.resetAttackStrengthTicker();
+                // this.resetAttackStrengthTicker(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
                 if (entity.getType().is(TagsEntity.REDIRECTABLE_PROJECTILE) && entity instanceof IProjectile) {
                     IProjectile iprojectile = (IProjectile) entity;
 
+                    // CraftBukkit start
+                    if (CraftEventFactory.handleNonLivingEntityDamageEvent(entity, damagesource, f1, false)) {
+                        return;
+                    }
+                    // CraftBukkit end
                     if (iprojectile.deflect(ProjectileDeflection.AIM_DEFLECT, this, this, true)) {
                         this.level().playSound((Entity) null, this.getX(), this.getY(), this.getZ(), SoundEffects.PLAYER_ATTACK_NODAMAGE, this.getSoundSource());
                         return;
@@ -1178,9 +1244,26 @@
                         }
 
                         if (entity instanceof EntityPlayer && entity.hurtMarked) {
+                            // CraftBukkit start - Add Velocity Event
+                            boolean cancelled = false;
+                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
+
+                            PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                            this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled()) {
+                                cancelled = true;
+                            } else if (!velocity.equals(event.getVelocity())) {
+                                player.setVelocity(event.getVelocity());
+                            }
+
+                            if (!cancelled) {
                             ((EntityPlayer) entity).connection.send(new PacketPlayOutEntityVelocity(entity));
                             entity.hurtMarked = false;
                             entity.setDeltaMovement(vec3d);
+                            }
+                            // CraftBukkit end
                         }
 
                         if (flag2) {
@@ -1247,9 +1330,14 @@
                             }
                         }
 
-                        this.causeFoodExhaustion(0.1F);
+                        this.causeFoodExhaustion(0.1F, EntityExhaustionEvent.ExhaustionReason.ATTACK); // CraftBukkit - EntityExhaustionEvent
                     } else {
                         this.level().playSound((Entity) null, this.getX(), this.getY(), this.getZ(), SoundEffects.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
+                        // CraftBukkit start - resync on cancelled event
+                        if (this instanceof EntityPlayer) {
+                            ((EntityPlayer) this).getBukkitEntity().updateInventory();
+                        }
+                        // CraftBukkit end
                     }
                 }
 
@@ -1284,7 +1372,14 @@
 
     @Override
     public void remove(Entity.RemovalReason entity_removalreason) {
-        super.remove(entity_removalreason);
+        // CraftBukkit start - add Bukkit remove cause
+        this.remove(entity_removalreason, null);
+    }
+
+    @Override
+    public void remove(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
+        super.remove(entity_removalreason, cause);
+        // CraftBukkit end
         this.inventoryMenu.removed(this);
         if (this.containerMenu != null && this.hasContainerOpen()) {
             this.doCloseContainer();
@@ -1348,6 +1443,12 @@
     }
 
     public Either<EntityHuman.EnumBedResult, Unit> startSleepInBed(BlockPosition blockposition) {
+        // CraftBukkit start
+        return this.startSleepInBed(blockposition, false);
+    }
+
+    public Either<EntityHuman.EnumBedResult, Unit> startSleepInBed(BlockPosition blockposition, boolean force) {
+        // CraftBukkit end
         this.startSleeping(blockposition);
         this.sleepCounter = 0;
         return Either.right(Unit.INSTANCE);
@@ -1502,7 +1603,15 @@
     }
 
     public void startFallFlying() {
-        this.setSharedFlag(7, true);
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+            this.setSharedFlag(7, true);
+        } else {
+            // SPIGOT-5542: must toggle like below
+            this.setSharedFlag(7, true);
+            this.setSharedFlag(7, false);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1617,10 +1726,21 @@
         return this.experienceLevel >= 30 ? 112 + (this.experienceLevel - 30) * 9 : (this.experienceLevel >= 15 ? 37 + (this.experienceLevel - 15) * 5 : 7 + this.experienceLevel * 2);
     }
 
+    // CraftBukkit start
     public void causeFoodExhaustion(float f) {
+        this.causeFoodExhaustion(f, EntityExhaustionEvent.ExhaustionReason.UNKNOWN);
+    }
+
+    public void causeFoodExhaustion(float f, EntityExhaustionEvent.ExhaustionReason reason) {
+        // CraftBukkit end
         if (!this.abilities.invulnerable) {
             if (!this.level().isClientSide) {
-                this.foodData.addExhaustion(f);
+                // CraftBukkit start
+                EntityExhaustionEvent event = CraftEventFactory.callPlayerExhaustionEvent(this, reason, f);
+                if (!event.isCancelled()) {
+                    this.foodData.addExhaustion(event.getExhaustion());
+                }
+                // CraftBukkit end
             }
 
         }
@@ -1717,34 +1837,50 @@
 
     protected void removeEntitiesOnShoulder() {
         if (this.timeEntitySatOnShoulder + 20L < this.level().getGameTime()) {
-            this.respawnEntityOnShoulder(this.getShoulderEntityLeft());
-            this.setShoulderEntityLeft(new NBTTagCompound());
-            this.respawnEntityOnShoulder(this.getShoulderEntityRight());
-            this.setShoulderEntityRight(new NBTTagCompound());
+            // CraftBukkit start
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityLeft())) {
+                this.setShoulderEntityLeft(new NBTTagCompound());
+            }
+            if (this.respawnEntityOnShoulder(this.getShoulderEntityRight())) {
+                this.setShoulderEntityRight(new NBTTagCompound());
+            }
+            // CraftBukkit end
         }
 
     }
 
-    private void respawnEntityOnShoulder(NBTTagCompound nbttagcompound) {
+    public Entity getEntityOnShoulder(NBTTagCompound nbttagcompound) { // CraftBukkit - split
         World world = this.level();
 
         if (world instanceof WorldServer worldserver) {
             if (!nbttagcompound.isEmpty()) {
                 try (ProblemReporter.j problemreporter_j = new ProblemReporter.j(this.problemPath(), EntityHuman.LOGGER)) {
-                    EntityTypes.create(TagValueInput.create(problemreporter_j.forChild(() -> {
+                    return EntityTypes.create(TagValueInput.create(problemreporter_j.forChild(() -> { // CraftBukkit
                         return ".shoulder";
-                    }), worldserver.registryAccess(), nbttagcompound), worldserver, EntitySpawnReason.LOAD).ifPresent((entity) -> {
+                    }), worldserver.registryAccess(), nbttagcompound), worldserver, EntitySpawnReason.LOAD).map((entity) -> { // CraftBukkit
                         if (entity instanceof EntityTameableAnimal entitytameableanimal) {
                             entitytameableanimal.setOwner(this);
                         }
 
                         entity.setPos(this.getX(), this.getY() + (double) 0.7F, this.getZ());
-                        worldserver.addWithUUID(entity);
-                    });
+                        return entity; // CraftBukkit
+                    }).orElse(null); // CraftBukkit
                 }
             }
         }
 
+        // CraftBukkit start
+        return null;
+    }
+
+    private boolean respawnEntityOnShoulder(NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
+        Entity entity = getEntityOnShoulder(nbttagcompound);
+        if (entity != null) {
+            return ((WorldServer) this.level()).addWithUUID(entity, CreatureSpawnEvent.SpawnReason.SHOULDER_ENTITY);
+        }
+
+        return true;
+        // CraftBukkit end
     }
 
     @Nullable
