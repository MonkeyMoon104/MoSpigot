--- a/net/minecraft/world/level/block/entity/vault/VaultBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/vault/VaultBlockEntity.java
@@ -42,6 +42,13 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParameters;
 import net.minecraft.world.phys.Vec3D;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseLootEvent;
+import org.bukkit.event.block.VaultDisplayItemEvent;
+// CraftBukkit end
+
 public class VaultBlockEntity extends TileEntity {
 
     private final VaultServerData serverData = new VaultServerData();
@@ -82,13 +89,13 @@
         VaultServerData vaultserverdata = this.serverData;
 
         Objects.requireNonNull(this.serverData);
-        optional.ifPresent(vaultserverdata::set);
+        ((Optional<VaultServerData>) optional).ifPresent(vaultserverdata::set); // CraftBukkit - decompile error
         this.config = (VaultConfig) valueinput.read("config", VaultConfig.CODEC).orElse(VaultConfig.DEFAULT);
         optional = valueinput.read("shared_data", VaultSharedData.CODEC);
         VaultSharedData vaultshareddata = this.sharedData;
 
         Objects.requireNonNull(this.sharedData);
-        optional.ifPresent(vaultshareddata::set);
+        ((Optional<VaultSharedData>) optional).ifPresent(vaultshareddata::set); // CraftBukkit - decompile error
     }
 
     @Nullable
@@ -163,6 +170,14 @@
                     if (!list.isEmpty()) {
                         entityhuman.awardStat(StatisticList.ITEM_USED.get(itemstack.getItem()));
                         itemstack.consume(vaultconfig.keyItem().getCount(), entityhuman);
+                        // CraftBukkit start
+                        BlockDispenseLootEvent vaultDispenseLootEvent = CraftEventFactory.callBlockDispenseLootEvent(worldserver, blockposition, entityhuman, list);
+                        if (vaultDispenseLootEvent.isCancelled()) {
+                            return;
+                        }
+
+                        list = vaultDispenseLootEvent.getDispensedLoot().stream().map(CraftItemStack::asNMSCopy).toList();
+                        // CraftBukkit end
                         unlock(worldserver, iblockdata, blockposition, vaultconfig, vaultserverdata, vaultshareddata, list);
                         vaultserverdata.addToRewardedPlayers(entityhuman);
                         vaultshareddata.updateConnectedPlayersWithinRange(worldserver, blockposition, vaultserverdata, vaultconfig, vaultconfig.deactivationRange());
@@ -184,6 +199,14 @@
                 vaultshareddata.setDisplayItem(ItemStack.EMPTY);
             } else {
                 ItemStack itemstack = getRandomDisplayItemFromLootTable(worldserver, blockposition, (ResourceKey) vaultconfig.overrideLootTableToDisplay().orElse(vaultconfig.lootTable()));
+                // CraftBukkit start
+                VaultDisplayItemEvent event = CraftEventFactory.callVaultDisplayItemEvent(worldserver, blockposition, itemstack);
+                if (event.isCancelled()) {
+                    return;
+                }
+
+                itemstack = CraftItemStack.asNMSCopy(event.getDisplayItem());
+                // CraftBukkit end
 
                 vaultshareddata.setDisplayItem(itemstack);
             }
